; -*- mode: clojure; -*-
; vim: filetype=clojure

(load-plugins)

(logging/init {:file "/var/log/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 10)

;The following code is based on the code sample in this pull request comment on Github:
; https://github.com/aphyr/riemann/issues/411#issue-36716498

(require 'capacitor.core)
(require 'capacitor.async)
(require 'clojure.core.async)

;Create an asynchronous InfluxDB client using the capacitor library:
(defn make-async-influxdb-client [opts]
    (let [client (capacitor.core/make-client opts)
      ;Make a channel to buffer influxdb events
      events-in (capacitor.async/make-chan)
      ;Make a channel to collect influxdb responses (ignored, really)
      resp-out (capacitor.async/make-chan)]
      ;Start the run loop with a batch size of max 100 events and max 10 seconds
      (capacitor.async/run! events-in resp-out client 100 10000)
        (fn [series payload]
          (let [p (merge payload {
            :series series
            ;; s to ms
            :time   (* 1000 (:time payload))})]
            (clojure.core.async/put! events-in p)))))


;(def email (mailer {:from "RIEMANN_SMTP_FROM"
;         :host "RIEMANN_SMTP_HOST"
;         :port RIEMANN_SMTP_PORT
;         :user "RIEMANN_SMTP_USER"
;         :pass "RIEMANN_SMTP_PWD"}))

;(def tell-ops (rollup 5 3600 (email "RIEMANN_SMTP_TO")))

;A function that takes the asynchronnous InfluxDB client created
; above and creates a function we can use in our streams
; to write to InfluxDB asynchronously:

(def write-influxdb-async (make-async-influxdb-client {
  :host "RIEMANN_INFLUXDB_HOST"
  :port RIEMANN_INFLUXDB_PORT
  :username "RIEMANN_INFLUXDB_USERNAME"
  :password "RIEMANN_INFLUXDB_PASSWORD"
  :db "RIEMANN_INFLUXDB_DB"
  }))

(let [index (index)]

 ; (streams
 ;     (where (and (not (.contains service "phabricator"))
 ;                 (or (state "critical")
 ;                     (state "warning"))
 ;       ) tell-ops))

  ;Inbound events will be passed to the functions that come after (streams...
  (streams
    ;This is one function. Index all events immediately:
    index

    ;Asynchronous InfluxDB writer; this creates series names automatically by combining the hostname and service n                                                                ame from the event
    ;passed into it:
    (fn [event]
      (let [series (format "%s.%s" (:host event) (:service event))]
        (write-influxdb-async series {
          :host (:host event)
          :time  (:time event)
          :value (:metric event)
          :name (:service event)})))

    ;Log everything to the log file defined above in (logging/init...
    ;Commenting it out since we don't need it right now, 
    ;but it's nice to have at hand in case we need to debug things later:
    ;#(info %)
    ))
